[build-system]
requires = ["setuptools>=68.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "python-learning-lab"
version = "0.1.0"
description = "A structured laboratory environment for Python concepts and patterns"
readme = "README.md"
requires-python = ">=3.13"
license = {text = "MIT"}
authors = [
    {name = "Ryan Franklin", email = "ryan.franklin@ms3dm.tech"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]

dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "ruff>=0.0.285",
    "bandit>=1.7.5",
    "pre-commit>=3.3.3",
    "jupyter>=1.0.0",
    "ipython>=8.14.0",
    "pyright>=1.1.390",
    "coverage-badge>=1.1.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["core*", "lessons*"]

[tool.pytest.ini_options]
testpaths = ["lessons"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=lessons",
    "--cov=core",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.black]
line-length = 79
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 79
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"notebooks/*.ipynb" = ["E402"]  # Allow imports after path manipulation

[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101"]  # Skip assert_used check since we use assertions for validation

[tool.coverage.run]
source = ["lessons", "core"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.pyright]
pythonVersion = "3.13"
typeCheckingMode = "standard"
reportMissingTypeStubs = false
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportUnknownVariableType = false
include = ["core", "lessons", "examples"]
exclude = [
    "**/__pycache__",
    "**/.pytest_cache",
    "**/node_modules",
    ".venv",
    "build",
    "dist",
    "**/tests/**",  # Tests intentionally pass invalid types to test validation
]

